//混合 
//带参数的混合  不叫函数
//带默认值的混合 @w:100px; 
.juzhong(@w, @h, @c) {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    margin: auto;
    bottom: 0;
    background: @c;
    height: @h;
    width: @w;
    // margin-top: 20px;
}

// * {
//     margin: 0;
//     padding: 0;
// }

// #wrap {
//     position: relative;
//     width: 300px;
//     height: 400px;
//     border: 1px solid;
//     margin: 0 auto;

//     .inner {
//         position: absolute;
//         left: 0;
//         top: 0;
//         right: 0;
//         margin: auto;
//         bottom: 0;
//         background: pink;
//         height: 100px;
//         width: 100px;

//         //  此时有空格 无法生效 所以要去除空格
//         &:hover {
//             background: black;
//         }
//     }

//此时有大量的冗余代码 不好 使用混合
//     .inner2 {
//         .juzhong(100px, 100px, black);
//         //如果形参和实参不匹配的时候 实参可以指定一个 例如 @c:black；
//     }
// }

// less里面的匹配模式相当于js里面的if，但又不完全是，比如用css画一个三角
//引入
// @_ 匹配模式  每次调用同名下边的混合时会调用查找一个同名混合
//  @import "./trangle.less";
//三角形
// .border(@w,@t,@c){
// border: @arguments;  //这样节省了 @w @t @c
// }
// #san .sjx{
// .triangle();
//    .triangle(R,40px, black);
//    .border(1px,solid,black);
// }


//less运算
// width:(100+100px); //在less中只要一个带less就可以

//less继承 
//同一属性不同属性值用混合  同一属性用继承


* {
    margin: 0;
    padding: 0;
}

@import './extends.less';

#wrap1 {

    //  position: relative;
    //  width: 300px;
    //  height: 300px;
    //  border: 1px solid;
    //  margin: 0 auto;
    .inner {
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;
        margin: auto;
        // &:nth-child(1){
        //     width: 100px;
        //     height: 100px;
        //     background: pink;

        //        .juzhong(100px,100px,pink);   //传参之后 其他函数内的也会生效
        // }
        // &:nth-child(2){
        //     width:50px;
        //     height: 50px;
        //     background: black;

        //     .juzhong(50px ,50px, black);
        // }
    }
}


//  ~"cacl(100px+100)" 避免编译

//  算术运算符 +、-、*、/ 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。
// 计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。
// 乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义，
// 一个长度乘以一个长度就得到一个区域，而 CSS 是不支持指定区域的。Less 将按数字的原样进行操作，并将为计算结果指定明确的单位类型。
//less中//开头的注释不会被编译到less中  /**/开头的会被编译到
//使用@来申明一个变量 @pink:pink;
// 作为普通值使用直接@pink
//作为选择器和属性名 :#@{selector值}的形式
// 作为url @{url}
// 变量的延迟加载
//   less嵌套规则使用基本的嵌套规则 还有&的使用 &只代表父级


//less中的普通混合 
//混合就是将一系列属性从一个规则引入到另一个规则中
// 1.普通混合
// 2.不带输出的混合
// 3。带参数的混合
// 4.带参数且有默认值的混合
// 5.带多个参数的混合
// 6.命名参数
// 7.arguments变量


//可以进行加减乘除的运算

//less避免编译